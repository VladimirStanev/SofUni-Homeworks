Supplement and Robot abstract classes : Abstract class constructor should be public (mine was protected)!!!

_____________________________________________________________________________________________________________________

Child classes : Не знам дали има разлика, но за всеки клас лектора е направил ,,private const''-анти и им е задал стойности, които
след това лектора е сложил в ,,base'', а аз съм ги написал директно, като числа.

_____________________________________________________________________________________________________________________


ROBOT CLASS : В моя конструктор нещата са така :

protected Robot(string model, int batteryCapacity, int conversionCapacityIndex)
        {
            Model = model;
            BatteryCapacity = batteryCapacity;
            BatteryLevel = BatteryCapacity;
            ConvertionCapacityIndex = conversionCapacityIndex;

            interfaceStandards = new List<int>();
        }

 А трябва да са така:

public Robot(string model, int batteryCapacity, int convertionCapacityIndex)
        {
            Model = model;
            BatteryCapacity = batteryCapacity;
            this.batteryLevel = batteryCapacity;
            this.convertionCapacityIndex = convertionCapacityIndex;
            this.interfaceStandards = new List<int>();
        }

,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,

Моите работи са сетнати така : 
public int BatteryLevel { get; private set; }

А неговите: 
public int BatteryLevel => this.batteryLevel;
public int ConvertionCapacityIndex => this.convertionCapacityIndex;
public IReadOnlyCollection<int> InterfaceStandards => this.interfaceStandards;

,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,

ToString() Methode :
Getting the name should look like this: 

sb.AppendLine($"{this.GetType().Name} {this.Model}:");
            sb.AppendLine($"--Maximum battery capacity: {this.BatteryCapacity}");
            sb.AppendLine($"--Current battery level: {this.BatteryLevel}");
            sb.Append($"--Supplements installed: ");

_____________________________________________________________________________________________________________________


SupplementRepository:
Created field should be private readonly!!!!(it was only private)

Всички метопди са направени със => (кратък начин), но май и моят начин е правилен
(public bool RemoveByName(string typeName) => this.supplements.Remove
(this.supplements.FirstOrDefault(x => x.GetType().Name == typeName));)


,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,


RobotRepository:
FindByStandart method is written like this :
public IRobot FindByStandard(int interfaceStandard) => this.robots.FirstOrDefault
(x => x.InterfaceStandards.Any(y => y == interfaceStandard));


_____________________________________________________________________________________________________________________

Controller class:

Във CreateRobot(string model, string typeName) е създаден IRobot, а не Rоbot и имената са проверени със nameof(blabla).
Add-ването е ок

Същото нещо за CreateSupplement (string typeName)

,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,


Всички останали методи са грешни, трябва да изглеждат така:

public string UpgradeRobot(string model, string supplementTypeName)
        {            
            ISupplement supplement = this.supplements.Models().FirstOrDefault(x => x.GetType().Name == supplementTypeName);

            var selectedModels = this.robots.Models().Where(r => r.Model == model);
            var stillNotUpgraded = selectedModels.Where(r => r.InterfaceStandards.All(s => s != supplement.InterfaceStandard));
            var robotForUpgrade = stillNotUpgraded.FirstOrDefault();

            if (robotForUpgrade == null)
            {
                return string.Format(OutputMessages.AllModelsUpgraded, model);
            }


            robotForUpgrade.InstallSupplement(supplement);
            this.supplements.RemoveByName(supplementTypeName);

            return string.Format(OutputMessages.UpgradeSuccessful, model, supplementTypeName);
        }
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,

public string PerformService(string serviceName, int intefaceStandard, int totalPowerNeeded)
        {
            var selectedRobots = this.robots.Models().Where(r => r.InterfaceStandards.Any(i => i == intefaceStandard)).OrderByDescending(y => y.BatteryLevel);

            if (selectedRobots.Count() == 0)
            {
                return string.Format(OutputMessages.UnableToPerform, intefaceStandard);
            }

            int powerSum = selectedRobots.Sum(r => r.BatteryLevel);

            if (powerSum < totalPowerNeeded)
            {
                return string.Format(OutputMessages.MorePowerNeeded, serviceName, totalPowerNeeded - powerSum);
            }

            int usedRobotsCount = 0;

            foreach (var robot in selectedRobots)
            {
                usedRobotsCount++;

                if (totalPowerNeeded <= robot.BatteryLevel)
                {
                    robot.ExecuteService(totalPowerNeeded);
                    break;
                }
                else
                {
                    totalPowerNeeded -= robot.BatteryLevel;
                    robot.ExecuteService(robot.BatteryLevel);
                }

            }

            return string.Format(OutputMessages.PerformedSuccessfully, serviceName, usedRobotsCount);
        }

,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,

public string Report()
        {
            StringBuilder sb = new StringBuilder();

            var robotReportCollection = this.robots.Models().OrderByDescending(r => r.BatteryLevel).ThenBy(b => b.BatteryCapacity);

            foreach (var robot in robotReportCollection)
            {
                sb.AppendLine(robot.ToString());
            }

            return sb.ToString().TrimEnd();
        }
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,

public string RobotRecovery(string model, int minutes)
        {
            var selectedRobots = this.robots.Models().Where(r => r.Model == model && r.BatteryLevel*2 < r.BatteryCapacity);
            int robotsFed = 0;

            foreach (var robot in selectedRobots)
            {
                robot.Eating(minutes);
                robotsFed++;
            }

            return string.Format(OutputMessages.RobotsFed, robotsFed);
        }

_____________________________________________________________________________________________________________________


UNIT TESTING

public class Tests
    {
        [SetUp]
        public void Setup()
        {
        }

        [Test]
        public void ProduceRobot_ValidParams()
        {
            Factory factory = new Factory("SpaceX", 10);

            string actualResult = factory.ProduceRobot("Robo-3", 2500, 22);
            string expectedResult = "Produced --> Robot model: Robo-3 IS: 22, Price: 2500.00";

            Assert.AreEqual(expectedResult, actualResult);

        }

        [Test]
        public void ProduceRobot_CheckAdding()
        {
            Factory factory = new Factory("SpaceX", 10);

            int expectedCountBeforeProduce = 0;
            int actualCountBeforeProduce = factory.Robots.Count;

            factory.ProduceRobot("Robo-3", 2500, 22);

            int expectedCountAfterProduce = 1;
            int actualCountAfterProduce = factory.Robots.Count;

            Assert.AreEqual(expectedCountBeforeProduce, actualCountBeforeProduce);
            Assert.AreEqual(expectedCountAfterProduce, actualCountAfterProduce);

        }

        [Test]
        public void ProduceRobot_CapacityFull()
        {
            Factory factory = new Factory("SpaceX", 2);

            factory.ProduceRobot("Robo-3", 2500, 22);
            factory.ProduceRobot("Robo-3", 2500, 22);
            string actualResult = factory.ProduceRobot("Robo-3", 2500, 22);
            string expectedResult = "The factory is unable to produce more robots for this production day!";

            Assert.AreEqual(expectedResult, actualResult);
        }

        [Test]
        public void ProduceSupplement_ValidParams()
        {
            Factory factory = new Factory("SpaceX", 2);

            string actualResult = factory.ProduceSupplement("SpecializedArm", 8);

            string expectedResult = "Supplement: SpecializedArm IS: 8";
            Assert.AreEqual(expectedResult, actualResult);
        }

        [Test]
        public void ProduceSupplement_CheckAdding()
        {
            Factory factory = new Factory("SpaceX", 10);

            int expectedCountBeforeProduce = 0;
            int actualCountBeforeProduce = factory.Supplements.Count;

            factory.ProduceSupplement("SpecializedArm", 8);

            int expectedCountAfterProduce = 1;
            int actualCountAfterProduce = factory.Supplements.Count;

            Assert.AreEqual(expectedCountBeforeProduce, actualCountBeforeProduce);
            Assert.AreEqual(expectedCountAfterProduce, actualCountAfterProduce);

        }

        [Test]
        public void UpgradeRobot_Successful()
        {
            Factory factory = new Factory("SpaceX", 10);

            factory.ProduceRobot("Robo-3", 2500, 22);
            factory.ProduceSupplement("SpecializedArm", 22);

            var actualResult = factory.UpgradeRobot(factory.Robots.FirstOrDefault(), factory.Supplements.FirstOrDefault());

            Assert.IsTrue(actualResult);

        }

        [Test]
        public void UpgradeRobot_AlreadyUpgraded()
        {
            Factory factory = new Factory("SpaceX", 10);

            factory.ProduceRobot("Robo-3", 2500, 22);
            factory.ProduceSupplement("SpecializedArm", 22);

            factory.UpgradeRobot(factory.Robots.FirstOrDefault(), factory.Supplements.FirstOrDefault());

            var actualResult = factory.UpgradeRobot(factory.Robots.FirstOrDefault(), factory.Supplements.FirstOrDefault());

            Assert.IsFalse(actualResult);

        }

        [Test]
        public void UpgradeRobot_DifferentStandards()
        {
            Factory factory = new Factory("SpaceX", 10);

            factory.ProduceRobot("Robo-3", 2500, 22);
            factory.ProduceSupplement("SpecializedArm", 21);

            var actualResult = factory.UpgradeRobot(factory.Robots.FirstOrDefault(), factory.Supplements.FirstOrDefault());

            Assert.IsFalse(actualResult);

        }

        [Test]
        public void SellRobot_Successful()
        {
            Factory factory = new Factory("SpaceX", 10);

            factory.ProduceRobot("Robo-3", 2000, 22);
            factory.ProduceRobot("Robo-3", 2500, 22);
            factory.ProduceRobot("Robo-3", 30000, 22);

            Robot robot = factory.Robots.FirstOrDefault(r => r.Price == 2000);

            var robotSold = factory.SellRobot(2499);

            Assert.AreSame(robot, robotSold);

        }
    }